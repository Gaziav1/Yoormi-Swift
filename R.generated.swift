//
// This is a generated file, do not edit!
// Generated by R.swift, see https://github.com/mac-cain13/R.swift
//

import Foundation
import Rswift
import UIKit

/// This `R` struct is generated and contains references to static resources.
struct R: Rswift.Validatable {
  fileprivate static let applicationLocale = hostingBundle.preferredLocalizations.first.flatMap { Locale(identifier: $0) } ?? Locale.current
  fileprivate static let hostingBundle = Bundle(for: R.Class.self)

  /// Find first language and bundle for which the table exists
  fileprivate static func localeBundle(tableName: String, preferredLanguages: [String]) -> (Foundation.Locale, Foundation.Bundle)? {
    // Filter preferredLanguages to localizations, use first locale
    var languages = preferredLanguages
      .map { Locale(identifier: $0) }
      .prefix(1)
      .flatMap { locale -> [String] in
        if hostingBundle.localizations.contains(locale.identifier) {
          if let language = locale.languageCode, hostingBundle.localizations.contains(language) {
            return [locale.identifier, language]
          } else {
            return [locale.identifier]
          }
        } else if let language = locale.languageCode, hostingBundle.localizations.contains(language) {
          return [language]
        } else {
          return []
        }
      }

    // If there's no languages, use development language as backstop
    if languages.isEmpty {
      if let developmentLocalization = hostingBundle.developmentLocalization {
        languages = [developmentLocalization]
      }
    } else {
      // Insert Base as second item (between locale identifier and languageCode)
      languages.insert("Base", at: 1)

      // Add development language as backstop
      if let developmentLocalization = hostingBundle.developmentLocalization {
        languages.append(developmentLocalization)
      }
    }

    // Find first language for which table exists
    // Note: key might not exist in chosen language (in that case, key will be shown)
    for language in languages {
      if let lproj = hostingBundle.url(forResource: language, withExtension: "lproj"),
         let lbundle = Bundle(url: lproj)
      {
        let strings = lbundle.url(forResource: tableName, withExtension: "strings")
        let stringsdict = lbundle.url(forResource: tableName, withExtension: "stringsdict")

        if strings != nil || stringsdict != nil {
          return (Locale(identifier: language), lbundle)
        }
      }
    }

    // If table is available in main bundle, don't look for localized resources
    let strings = hostingBundle.url(forResource: tableName, withExtension: "strings", subdirectory: nil, localization: nil)
    let stringsdict = hostingBundle.url(forResource: tableName, withExtension: "stringsdict", subdirectory: nil, localization: nil)

    if strings != nil || stringsdict != nil {
      return (applicationLocale, hostingBundle)
    }

    // If table is not found for requested languages, key will be shown
    return nil
  }

  /// Load string from Info.plist file
  fileprivate static func infoPlistString(path: [String], key: String) -> String? {
    var dict = hostingBundle.infoDictionary
    for step in path {
      guard let obj = dict?[step] as? [String: Any] else { return nil }
      dict = obj
    }
    return dict?[key] as? String
  }

  static func validate() throws {
    try intern.validate()
  }

  #if os(iOS) || os(tvOS)
  /// This `R.storyboard` struct is generated, and contains static references to 1 storyboards.
  struct storyboard {
    /// Storyboard `LaunchScreen`.
    static let launchScreen = _R.storyboard.launchScreen()

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "LaunchScreen", bundle: ...)`
    static func launchScreen(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.launchScreen)
    }
    #endif

    fileprivate init() {}
  }
  #endif

  /// This `R.color` struct is generated, and contains static references to 0 colors.
  struct color {
    /// This `R.color.appColors` struct is generated, and contains static references to 9 colors.
    struct appColors {
      /// Color `AppMainColor`.
      static let appMainColor = Rswift.ColorResource(bundle: R.hostingBundle, name: "AppColors/AppMainColor")
      /// Color `Background`.
      static let background = Rswift.ColorResource(bundle: R.hostingBundle, name: "AppColors/Background")
      /// Color `Border`.
      static let border = Rswift.ColorResource(bundle: R.hostingBundle, name: "AppColors/Border")
      /// Color `Button`.
      static let button = Rswift.ColorResource(bundle: R.hostingBundle, name: "AppColors/Button")
      /// Color `ControlSelection`.
      static let controlSelection = Rswift.ColorResource(bundle: R.hostingBundle, name: "AppColors/ControlSelection")
      /// Color `DarkLabel`.
      static let darkLabel = Rswift.ColorResource(bundle: R.hostingBundle, name: "AppColors/DarkLabel")
      /// Color `Label`.
      static let label = Rswift.ColorResource(bundle: R.hostingBundle, name: "AppColors/Label")
      /// Color `SideMenuLabel`.
      static let sideMenuLabel = Rswift.ColorResource(bundle: R.hostingBundle, name: "AppColors/SideMenuLabel")
      /// Color `lightBackground`.
      static let lightBackground = Rswift.ColorResource(bundle: R.hostingBundle, name: "AppColors/lightBackground")

      #if os(iOS) || os(tvOS)
      /// `UIColor(named: "AppMainColor", bundle: ..., traitCollection: ...)`
      @available(tvOS 11.0, *)
      @available(iOS 11.0, *)
      static func appMainColor(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
        return UIKit.UIColor(resource: R.color.appColors.appMainColor, compatibleWith: traitCollection)
      }
      #endif

      #if os(iOS) || os(tvOS)
      /// `UIColor(named: "Background", bundle: ..., traitCollection: ...)`
      @available(tvOS 11.0, *)
      @available(iOS 11.0, *)
      static func background(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
        return UIKit.UIColor(resource: R.color.appColors.background, compatibleWith: traitCollection)
      }
      #endif

      #if os(iOS) || os(tvOS)
      /// `UIColor(named: "Border", bundle: ..., traitCollection: ...)`
      @available(tvOS 11.0, *)
      @available(iOS 11.0, *)
      static func border(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
        return UIKit.UIColor(resource: R.color.appColors.border, compatibleWith: traitCollection)
      }
      #endif

      #if os(iOS) || os(tvOS)
      /// `UIColor(named: "Button", bundle: ..., traitCollection: ...)`
      @available(tvOS 11.0, *)
      @available(iOS 11.0, *)
      static func button(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
        return UIKit.UIColor(resource: R.color.appColors.button, compatibleWith: traitCollection)
      }
      #endif

      #if os(iOS) || os(tvOS)
      /// `UIColor(named: "ControlSelection", bundle: ..., traitCollection: ...)`
      @available(tvOS 11.0, *)
      @available(iOS 11.0, *)
      static func controlSelection(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
        return UIKit.UIColor(resource: R.color.appColors.controlSelection, compatibleWith: traitCollection)
      }
      #endif

      #if os(iOS) || os(tvOS)
      /// `UIColor(named: "DarkLabel", bundle: ..., traitCollection: ...)`
      @available(tvOS 11.0, *)
      @available(iOS 11.0, *)
      static func darkLabel(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
        return UIKit.UIColor(resource: R.color.appColors.darkLabel, compatibleWith: traitCollection)
      }
      #endif

      #if os(iOS) || os(tvOS)
      /// `UIColor(named: "Label", bundle: ..., traitCollection: ...)`
      @available(tvOS 11.0, *)
      @available(iOS 11.0, *)
      static func label(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
        return UIKit.UIColor(resource: R.color.appColors.label, compatibleWith: traitCollection)
      }
      #endif

      #if os(iOS) || os(tvOS)
      /// `UIColor(named: "SideMenuLabel", bundle: ..., traitCollection: ...)`
      @available(tvOS 11.0, *)
      @available(iOS 11.0, *)
      static func sideMenuLabel(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
        return UIKit.UIColor(resource: R.color.appColors.sideMenuLabel, compatibleWith: traitCollection)
      }
      #endif

      #if os(iOS) || os(tvOS)
      /// `UIColor(named: "lightBackground", bundle: ..., traitCollection: ...)`
      @available(tvOS 11.0, *)
      @available(iOS 11.0, *)
      static func lightBackground(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
        return UIKit.UIColor(resource: R.color.appColors.lightBackground, compatibleWith: traitCollection)
      }
      #endif

      fileprivate init() {}
    }

    fileprivate init() {}
  }

  /// This `R.entitlements` struct is generated, and contains static references to 1 properties.
  struct entitlements {
    struct comAppleDeveloperApplesignin {
      static let `default` = infoPlistString(path: ["com.apple.developer.applesignin"], key: "Default") ?? "Default"

      fileprivate init() {}
    }

    fileprivate init() {}
  }

  /// This `R.file` struct is generated, and contains static references to 4 files.
  struct file {
    /// Resource file `CatWaiting.json`.
    static let catWaitingJson = Rswift.FileResource(bundle: R.hostingBundle, name: "CatWaiting", pathExtension: "json")
    /// Resource file `GoogleService-Info.plist`.
    static let googleServiceInfoPlist = Rswift.FileResource(bundle: R.hostingBundle, name: "GoogleService-Info", pathExtension: "plist")
    /// Resource file `loading_indicator.json`.
    static let loading_indicatorJson = Rswift.FileResource(bundle: R.hostingBundle, name: "loading_indicator", pathExtension: "json")
    /// Resource file `rolling_cat_indicator.json`.
    static let rolling_cat_indicatorJson = Rswift.FileResource(bundle: R.hostingBundle, name: "rolling_cat_indicator", pathExtension: "json")

    /// `bundle.url(forResource: "CatWaiting", withExtension: "json")`
    static func catWaitingJson(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.catWaitingJson
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "GoogleService-Info", withExtension: "plist")`
    static func googleServiceInfoPlist(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.googleServiceInfoPlist
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "loading_indicator", withExtension: "json")`
    static func loading_indicatorJson(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.loading_indicatorJson
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "rolling_cat_indicator", withExtension: "json")`
    static func rolling_cat_indicatorJson(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.rolling_cat_indicatorJson
      return fileResource.bundle.url(forResource: fileResource)
    }

    fileprivate init() {}
  }

  /// This `R.image` struct is generated, and contains static references to 0 images.
  struct image {
    /// This `R.image.icons` struct is generated, and contains static references to 26 images.
    struct icons {
      /// Image `adoption`.
      static let adoption = Rswift.ImageResource(bundle: R.hostingBundle, name: "icons/adoption")
      /// Image `boy`.
      static let boy = Rswift.ImageResource(bundle: R.hostingBundle, name: "icons/boy")
      /// Image `camera`.
      static let camera = Rswift.ImageResource(bundle: R.hostingBundle, name: "icons/camera")
      /// Image `catChoice`.
      static let catChoice = Rswift.ImageResource(bundle: R.hostingBundle, name: "icons/catChoice")
      /// Image `cat`.
      static let cat = Rswift.ImageResource(bundle: R.hostingBundle, name: "icons/cat")
      /// Image `close`.
      static let close = Rswift.ImageResource(bundle: R.hostingBundle, name: "icons/close")
      /// Image `dismiss_circle`.
      static let dismiss_circle = Rswift.ImageResource(bundle: R.hostingBundle, name: "icons/dismiss_circle")
      /// Image `dogChoice`.
      static let dogChoice = Rswift.ImageResource(bundle: R.hostingBundle, name: "icons/dogChoice")
      /// Image `dog`.
      static let dog = Rswift.ImageResource(bundle: R.hostingBundle, name: "icons/dog")
      /// Image `email`.
      static let email = Rswift.ImageResource(bundle: R.hostingBundle, name: "icons/email")
      /// Image `girl`.
      static let girl = Rswift.ImageResource(bundle: R.hostingBundle, name: "icons/girl")
      /// Image `google`.
      static let google = Rswift.ImageResource(bundle: R.hostingBundle, name: "icons/google")
      /// Image `hambMenu`.
      static let hambMenu = Rswift.ImageResource(bundle: R.hostingBundle, name: "icons/hambMenu")
      /// Image `heart_filled`.
      static let heart_filled = Rswift.ImageResource(bundle: R.hostingBundle, name: "icons/heart_filled")
      /// Image `heart`.
      static let heart = Rswift.ImageResource(bundle: R.hostingBundle, name: "icons/heart")
      /// Image `info`.
      static let info = Rswift.ImageResource(bundle: R.hostingBundle, name: "icons/info")
      /// Image `like_circle`.
      static let like_circle = Rswift.ImageResource(bundle: R.hostingBundle, name: "icons/like_circle")
      /// Image `marker`.
      static let marker = Rswift.ImageResource(bundle: R.hostingBundle, name: "icons/marker")
      /// Image `password`.
      static let password = Rswift.ImageResource(bundle: R.hostingBundle, name: "icons/password")
      /// Image `plus`.
      static let plus = Rswift.ImageResource(bundle: R.hostingBundle, name: "icons/plus")
      /// Image `profile_empty`.
      static let profile_empty = Rswift.ImageResource(bundle: R.hostingBundle, name: "icons/profile_empty")
      /// Image `refresh_circle`.
      static let refresh_circle = Rswift.ImageResource(bundle: R.hostingBundle, name: "icons/refresh_circle")
      /// Image `sms`.
      static let sms = Rswift.ImageResource(bundle: R.hostingBundle, name: "icons/sms")
      /// Image `time`.
      static let time = Rswift.ImageResource(bundle: R.hostingBundle, name: "icons/time")
      /// Image `top_left_profile`.
      static let top_left_profile = Rswift.ImageResource(bundle: R.hostingBundle, name: "icons/top_left_profile")
      /// Image `top_right_messages`.
      static let top_right_messages = Rswift.ImageResource(bundle: R.hostingBundle, name: "icons/top_right_messages")

      #if os(iOS) || os(tvOS)
      /// `UIImage(named: "adoption", bundle: ..., traitCollection: ...)`
      static func adoption(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
        return UIKit.UIImage(resource: R.image.icons.adoption, compatibleWith: traitCollection)
      }
      #endif

      #if os(iOS) || os(tvOS)
      /// `UIImage(named: "boy", bundle: ..., traitCollection: ...)`
      static func boy(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
        return UIKit.UIImage(resource: R.image.icons.boy, compatibleWith: traitCollection)
      }
      #endif

      #if os(iOS) || os(tvOS)
      /// `UIImage(named: "camera", bundle: ..., traitCollection: ...)`
      static func camera(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
        return UIKit.UIImage(resource: R.image.icons.camera, compatibleWith: traitCollection)
      }
      #endif

      #if os(iOS) || os(tvOS)
      /// `UIImage(named: "cat", bundle: ..., traitCollection: ...)`
      static func cat(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
        return UIKit.UIImage(resource: R.image.icons.cat, compatibleWith: traitCollection)
      }
      #endif

      #if os(iOS) || os(tvOS)
      /// `UIImage(named: "catChoice", bundle: ..., traitCollection: ...)`
      static func catChoice(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
        return UIKit.UIImage(resource: R.image.icons.catChoice, compatibleWith: traitCollection)
      }
      #endif

      #if os(iOS) || os(tvOS)
      /// `UIImage(named: "close", bundle: ..., traitCollection: ...)`
      static func close(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
        return UIKit.UIImage(resource: R.image.icons.close, compatibleWith: traitCollection)
      }
      #endif

      #if os(iOS) || os(tvOS)
      /// `UIImage(named: "dismiss_circle", bundle: ..., traitCollection: ...)`
      static func dismiss_circle(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
        return UIKit.UIImage(resource: R.image.icons.dismiss_circle, compatibleWith: traitCollection)
      }
      #endif

      #if os(iOS) || os(tvOS)
      /// `UIImage(named: "dog", bundle: ..., traitCollection: ...)`
      static func dog(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
        return UIKit.UIImage(resource: R.image.icons.dog, compatibleWith: traitCollection)
      }
      #endif

      #if os(iOS) || os(tvOS)
      /// `UIImage(named: "dogChoice", bundle: ..., traitCollection: ...)`
      static func dogChoice(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
        return UIKit.UIImage(resource: R.image.icons.dogChoice, compatibleWith: traitCollection)
      }
      #endif

      #if os(iOS) || os(tvOS)
      /// `UIImage(named: "email", bundle: ..., traitCollection: ...)`
      static func email(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
        return UIKit.UIImage(resource: R.image.icons.email, compatibleWith: traitCollection)
      }
      #endif

      #if os(iOS) || os(tvOS)
      /// `UIImage(named: "girl", bundle: ..., traitCollection: ...)`
      static func girl(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
        return UIKit.UIImage(resource: R.image.icons.girl, compatibleWith: traitCollection)
      }
      #endif

      #if os(iOS) || os(tvOS)
      /// `UIImage(named: "google", bundle: ..., traitCollection: ...)`
      static func google(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
        return UIKit.UIImage(resource: R.image.icons.google, compatibleWith: traitCollection)
      }
      #endif

      #if os(iOS) || os(tvOS)
      /// `UIImage(named: "hambMenu", bundle: ..., traitCollection: ...)`
      static func hambMenu(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
        return UIKit.UIImage(resource: R.image.icons.hambMenu, compatibleWith: traitCollection)
      }
      #endif

      #if os(iOS) || os(tvOS)
      /// `UIImage(named: "heart", bundle: ..., traitCollection: ...)`
      static func heart(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
        return UIKit.UIImage(resource: R.image.icons.heart, compatibleWith: traitCollection)
      }
      #endif

      #if os(iOS) || os(tvOS)
      /// `UIImage(named: "heart_filled", bundle: ..., traitCollection: ...)`
      static func heart_filled(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
        return UIKit.UIImage(resource: R.image.icons.heart_filled, compatibleWith: traitCollection)
      }
      #endif

      #if os(iOS) || os(tvOS)
      /// `UIImage(named: "info", bundle: ..., traitCollection: ...)`
      static func info(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
        return UIKit.UIImage(resource: R.image.icons.info, compatibleWith: traitCollection)
      }
      #endif

      #if os(iOS) || os(tvOS)
      /// `UIImage(named: "like_circle", bundle: ..., traitCollection: ...)`
      static func like_circle(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
        return UIKit.UIImage(resource: R.image.icons.like_circle, compatibleWith: traitCollection)
      }
      #endif

      #if os(iOS) || os(tvOS)
      /// `UIImage(named: "marker", bundle: ..., traitCollection: ...)`
      static func marker(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
        return UIKit.UIImage(resource: R.image.icons.marker, compatibleWith: traitCollection)
      }
      #endif

      #if os(iOS) || os(tvOS)
      /// `UIImage(named: "password", bundle: ..., traitCollection: ...)`
      static func password(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
        return UIKit.UIImage(resource: R.image.icons.password, compatibleWith: traitCollection)
      }
      #endif

      #if os(iOS) || os(tvOS)
      /// `UIImage(named: "plus", bundle: ..., traitCollection: ...)`
      static func plus(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
        return UIKit.UIImage(resource: R.image.icons.plus, compatibleWith: traitCollection)
      }
      #endif

      #if os(iOS) || os(tvOS)
      /// `UIImage(named: "profile_empty", bundle: ..., traitCollection: ...)`
      static func profile_empty(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
        return UIKit.UIImage(resource: R.image.icons.profile_empty, compatibleWith: traitCollection)
      }
      #endif

      #if os(iOS) || os(tvOS)
      /// `UIImage(named: "refresh_circle", bundle: ..., traitCollection: ...)`
      static func refresh_circle(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
        return UIKit.UIImage(resource: R.image.icons.refresh_circle, compatibleWith: traitCollection)
      }
      #endif

      #if os(iOS) || os(tvOS)
      /// `UIImage(named: "sms", bundle: ..., traitCollection: ...)`
      static func sms(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
        return UIKit.UIImage(resource: R.image.icons.sms, compatibleWith: traitCollection)
      }
      #endif

      #if os(iOS) || os(tvOS)
      /// `UIImage(named: "time", bundle: ..., traitCollection: ...)`
      static func time(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
        return UIKit.UIImage(resource: R.image.icons.time, compatibleWith: traitCollection)
      }
      #endif

      #if os(iOS) || os(tvOS)
      /// `UIImage(named: "top_left_profile", bundle: ..., traitCollection: ...)`
      static func top_left_profile(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
        return UIKit.UIImage(resource: R.image.icons.top_left_profile, compatibleWith: traitCollection)
      }
      #endif

      #if os(iOS) || os(tvOS)
      /// `UIImage(named: "top_right_messages", bundle: ..., traitCollection: ...)`
      static func top_right_messages(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
        return UIKit.UIImage(resource: R.image.icons.top_right_messages, compatibleWith: traitCollection)
      }
      #endif

      fileprivate init() {}
    }

    /// This `R.image.images` struct is generated, and contains static references to 3 images.
    struct images {
      /// Image `AvatarTest`.
      static let avatarTest = Rswift.ImageResource(bundle: R.hostingBundle, name: "Images/AvatarTest")
      /// Image `DoggoTest2`.
      static let doggoTest2 = Rswift.ImageResource(bundle: R.hostingBundle, name: "Images/DoggoTest2")
      /// Image `DoggoTest`.
      static let doggoTest = Rswift.ImageResource(bundle: R.hostingBundle, name: "Images/DoggoTest")

      #if os(iOS) || os(tvOS)
      /// `UIImage(named: "AvatarTest", bundle: ..., traitCollection: ...)`
      static func avatarTest(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
        return UIKit.UIImage(resource: R.image.images.avatarTest, compatibleWith: traitCollection)
      }
      #endif

      #if os(iOS) || os(tvOS)
      /// `UIImage(named: "DoggoTest", bundle: ..., traitCollection: ...)`
      static func doggoTest(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
        return UIKit.UIImage(resource: R.image.images.doggoTest, compatibleWith: traitCollection)
      }
      #endif

      #if os(iOS) || os(tvOS)
      /// `UIImage(named: "DoggoTest2", bundle: ..., traitCollection: ...)`
      static func doggoTest2(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
        return UIKit.UIImage(resource: R.image.images.doggoTest2, compatibleWith: traitCollection)
      }
      #endif

      fileprivate init() {}
    }

    fileprivate init() {}
  }

  /// This `R.info` struct is generated, and contains static references to 1 properties.
  struct info {
    struct uiApplicationSceneManifest {
      static let _key = "UIApplicationSceneManifest"
      static let uiApplicationSupportsMultipleScenes = false

      struct uiSceneConfigurations {
        static let _key = "UISceneConfigurations"

        struct uiWindowSceneSessionRoleApplication {
          struct defaultConfiguration {
            static let _key = "Default Configuration"
            static let uiSceneConfigurationName = infoPlistString(path: ["UIApplicationSceneManifest", "UISceneConfigurations", "UIWindowSceneSessionRoleApplication", "Default Configuration"], key: "UISceneConfigurationName") ?? "Default Configuration"
            static let uiSceneDelegateClassName = infoPlistString(path: ["UIApplicationSceneManifest", "UISceneConfigurations", "UIWindowSceneSessionRoleApplication", "Default Configuration"], key: "UISceneDelegateClassName") ?? "$(PRODUCT_MODULE_NAME).SceneDelegate"

            fileprivate init() {}
          }

          fileprivate init() {}
        }

        fileprivate init() {}
      }

      fileprivate init() {}
    }

    fileprivate init() {}
  }

  /// This `R.string` struct is generated, and contains static references to 3 localization tables.
  struct string {
    /// This `R.string.infoPlist` struct is generated, and contains static references to 1 localization keys.
    struct infoPlist {
      /// en translation: Your address will be used for sorting and will not be publicly available
      ///
      /// Locales: en, ru
      static let nsLocationWhenInUseUsageDescription = Rswift.StringResource(key: "NSLocationWhenInUseUsageDescription", tableName: "InfoPlist", bundle: R.hostingBundle, locales: ["en", "ru"], comment: nil)

      /// en translation: Your address will be used for sorting and will not be publicly available
      ///
      /// Locales: en, ru
      static func nsLocationWhenInUseUsageDescription(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("NSLocationWhenInUseUsageDescription", tableName: "InfoPlist", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "InfoPlist", preferredLanguages: preferredLanguages) else {
          return "NSLocationWhenInUseUsageDescription"
        }

        return NSLocalizedString("NSLocationWhenInUseUsageDescription", tableName: "InfoPlist", bundle: bundle, comment: "")
      }

      fileprivate init() {}
    }

    /// This `R.string.launchScreen` struct is generated, and contains static references to 0 localization keys.
    struct launchScreen {
      fileprivate init() {}
    }

    /// This `R.string.localizable` struct is generated, and contains static references to 17 localization keys.
    struct localizable {
      /// en translation: Add photos of your pet
      ///
      /// Locales: ru, en
      static let addPetPhotos = Rswift.StringResource(key: "add-pet-photos", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ru", "en"], comment: nil)
      /// en translation: Add your photo (optional)
      ///
      /// Locales: ru, en
      static let addProfilePhoto = Rswift.StringResource(key: "add-profile-photo", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ru", "en"], comment: nil)
      /// en translation: Confirm code
      ///
      /// Locales: ru, en
      static let confirmCodeButtonTitle = Rswift.StringResource(key: "confirm-code-button-title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ru", "en"], comment: nil)
      /// en translation: Describe your pet
      ///
      /// Locales: ru, en
      static let addPetDescription = Rswift.StringResource(key: "add-pet-description", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ru", "en"], comment: nil)
      /// en translation: Done
      ///
      /// Locales: ru, en
      static let doneButtonTitle = Rswift.StringResource(key: "done-button-title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ru", "en"], comment: nil)
      /// en translation: Female
      ///
      /// Locales: ru, en
      static let female = Rswift.StringResource(key: "female", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ru", "en"], comment: nil)
      /// en translation: Loading
      ///
      /// Locales: ru, en
      static let loadingState = Rswift.StringResource(key: "loading-state", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ru", "en"], comment: nil)
      /// en translation: Male
      ///
      /// Locales: ru, en
      static let male = Rswift.StringResource(key: "male", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ru", "en"], comment: nil)
      /// en translation: Name
      ///
      /// Locales: ru, en
      static let name = Rswift.StringResource(key: "name", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ru", "en"], comment: nil)
      /// en translation: Next
      ///
      /// Locales: ru, en
      static let next = Rswift.StringResource(key: "next", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ru", "en"], comment: nil)
      /// en translation: Phone
      ///
      /// Locales: ru, en
      static let phone = Rswift.StringResource(key: "phone", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ru", "en"], comment: nil)
      /// en translation: Request code
      ///
      /// Locales: ru, en
      static let requestCodePhoneButtonTitle = Rswift.StringResource(key: "request-code-phone-button-title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ru", "en"], comment: nil)
      /// en translation: Select animal type
      ///
      /// Locales: ru, en
      static let animalTypeLabel = Rswift.StringResource(key: "animal-type-label", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ru", "en"], comment: nil)
      /// en translation: Select breed
      ///
      /// Locales: ru, en
      static let animalSubtypeLabel = Rswift.StringResource(key: "animal-subtype-label", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ru", "en"], comment: nil)
      /// en translation: Your address
      ///
      /// Locales: ru, en
      static let your_address = Rswift.StringResource(key: "your_address", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ru", "en"], comment: nil)
      /// en translation: Your address will be used for sorting and will not be publicly available
      ///
      /// Locales: ru, en
      static let address_note = Rswift.StringResource(key: "address_note", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ru", "en"], comment: nil)
      /// en translation: Your name
      ///
      /// Locales: ru, en
      static let userNameTextField = Rswift.StringResource(key: "user-name-text-field", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ru", "en"], comment: nil)

      /// en translation: Add photos of your pet
      ///
      /// Locales: ru, en
      static func addPetPhotos(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("add-pet-photos", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "add-pet-photos"
        }

        return NSLocalizedString("add-pet-photos", bundle: bundle, comment: "")
      }

      /// en translation: Add your photo (optional)
      ///
      /// Locales: ru, en
      static func addProfilePhoto(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("add-profile-photo", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "add-profile-photo"
        }

        return NSLocalizedString("add-profile-photo", bundle: bundle, comment: "")
      }

      /// en translation: Confirm code
      ///
      /// Locales: ru, en
      static func confirmCodeButtonTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("confirm-code-button-title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "confirm-code-button-title"
        }

        return NSLocalizedString("confirm-code-button-title", bundle: bundle, comment: "")
      }

      /// en translation: Describe your pet
      ///
      /// Locales: ru, en
      static func addPetDescription(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("add-pet-description", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "add-pet-description"
        }

        return NSLocalizedString("add-pet-description", bundle: bundle, comment: "")
      }

      /// en translation: Done
      ///
      /// Locales: ru, en
      static func doneButtonTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("done-button-title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "done-button-title"
        }

        return NSLocalizedString("done-button-title", bundle: bundle, comment: "")
      }

      /// en translation: Female
      ///
      /// Locales: ru, en
      static func female(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("female", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "female"
        }

        return NSLocalizedString("female", bundle: bundle, comment: "")
      }

      /// en translation: Loading
      ///
      /// Locales: ru, en
      static func loadingState(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("loading-state", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "loading-state"
        }

        return NSLocalizedString("loading-state", bundle: bundle, comment: "")
      }

      /// en translation: Male
      ///
      /// Locales: ru, en
      static func male(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("male", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "male"
        }

        return NSLocalizedString("male", bundle: bundle, comment: "")
      }

      /// en translation: Name
      ///
      /// Locales: ru, en
      static func name(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("name", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "name"
        }

        return NSLocalizedString("name", bundle: bundle, comment: "")
      }

      /// en translation: Next
      ///
      /// Locales: ru, en
      static func next(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("next", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "next"
        }

        return NSLocalizedString("next", bundle: bundle, comment: "")
      }

      /// en translation: Phone
      ///
      /// Locales: ru, en
      static func phone(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("phone", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "phone"
        }

        return NSLocalizedString("phone", bundle: bundle, comment: "")
      }

      /// en translation: Request code
      ///
      /// Locales: ru, en
      static func requestCodePhoneButtonTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("request-code-phone-button-title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "request-code-phone-button-title"
        }

        return NSLocalizedString("request-code-phone-button-title", bundle: bundle, comment: "")
      }

      /// en translation: Select animal type
      ///
      /// Locales: ru, en
      static func animalTypeLabel(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("animal-type-label", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "animal-type-label"
        }

        return NSLocalizedString("animal-type-label", bundle: bundle, comment: "")
      }

      /// en translation: Select breed
      ///
      /// Locales: ru, en
      static func animalSubtypeLabel(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("animal-subtype-label", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "animal-subtype-label"
        }

        return NSLocalizedString("animal-subtype-label", bundle: bundle, comment: "")
      }

      /// en translation: Your address
      ///
      /// Locales: ru, en
      static func your_address(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("your_address", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "your_address"
        }

        return NSLocalizedString("your_address", bundle: bundle, comment: "")
      }

      /// en translation: Your address will be used for sorting and will not be publicly available
      ///
      /// Locales: ru, en
      static func address_note(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("address_note", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "address_note"
        }

        return NSLocalizedString("address_note", bundle: bundle, comment: "")
      }

      /// en translation: Your name
      ///
      /// Locales: ru, en
      static func userNameTextField(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("user-name-text-field", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "user-name-text-field"
        }

        return NSLocalizedString("user-name-text-field", bundle: bundle, comment: "")
      }

      fileprivate init() {}
    }

    fileprivate init() {}
  }

  fileprivate struct intern: Rswift.Validatable {
    fileprivate static func validate() throws {
      try _R.validate()
    }

    fileprivate init() {}
  }

  fileprivate class Class {}

  fileprivate init() {}
}

struct _R: Rswift.Validatable {
  static func validate() throws {
    #if os(iOS) || os(tvOS)
    try storyboard.validate()
    #endif
  }

  #if os(iOS) || os(tvOS)
  struct storyboard: Rswift.Validatable {
    static func validate() throws {
      #if os(iOS) || os(tvOS)
      try launchScreen.validate()
      #endif
    }

    #if os(iOS) || os(tvOS)
    struct launchScreen: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = UIKit.UIViewController

      let bundle = R.hostingBundle
      let name = "LaunchScreen"

      static func validate() throws {
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }
    #endif

    fileprivate init() {}
  }
  #endif

  fileprivate init() {}
}
